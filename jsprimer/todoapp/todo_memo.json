{
    "Map":{
        "create":"const map = new Map();",
        "use constructor":"const map = new Map([['key1', 'value1'], ['key2', 'value2']])",
        "method":{
            "add element":"map.set('key', 'value')",
            "get count of elements":"map.size",
            "get value":"map.get('key')",
            "overwride value":"map.set('resistered key', 'new value')",
            "confirm exit of key":"map.has('key')"
        }
    },
    "Function and this":{
        "this value that is not in function":{
            "Execution Context":{
                "Script":{
                    "browser":"window object",
                    "node,js":"global object"
                },
                "Module":{
                    "all environment":"undefined"
                }
            }
        },
        "this value that is in function":{
            "this value is base object":{
                "base object":{
                    "in call function statement":"one left of .method"
                }
            },
            "other than Arrow Function":{
                "Function declaration":{
                    "call function as method":"this is base object",
                    "call function not as method":"this is undefined"
                },
                "Function expression":{
                    "call function as method":"this is base object",
                    "call function not as method":"this is undefined"
                },
                "the case that this is undefined":{
                    "assingn method to variable":"call function not as method"
                },
                "the case that this is other object":{
                    "assign method to other object property":"base object is other object"
                },
                "assign value to this and call function":{
                    "Function#call method":{
                        "function":"call function and assign value to this and argument",
                        "notation":"function.call(this value, argument, ...argument)",
                        "not define this":{
                            "notation":"function.call(null, argument, ...argument)"
                        }
                    },
                    "Function#apply method":{
                        "function":"call function and assign value to this and argument",
                        "notation":"function.apply(this value, [argument, ...argument])",
                        "not define this":{
                            "notation":"function.apply(null, [argument, ...argument])"
                        }
                    }
                },
                "assign value to this and return new functon":{
                    "Function#bind method":{
                        "function":"assign value to this and argument and return new function",
                        "notation":"function.bind(this value, argument, ...argument)",
                        "not define this":{
                            "notation":"function.call(null, argument, ...argument)"
                        }
                    }
                },
                "call back function":{
                    "higher-order function":"call back function called by higher-order function as function",
                    "this value in call back function":"undefined",
                    "how to deal":{
                        "use function#method":"call, apply, bind method",
                        "use Arrow Function":"class setOrMap {setOrMapInstance.forEach(listener => {listener.call(this);});}"
                    }
                }
            },
            "Arrow Function":{
                "this is not defined":"this is not defined in Arrow Function",
                "Static Scope and Scope Chain":"this search outer function by scope chain",
                "Arrow function this is outer scope this":"global this or outer function this",
                "outer function this":{
                    "call function as method":"this is base object",
                    "call function not as method":"this is undefined"
                }
            }
        },
        "reference global object":{
            "notation":"globalThis"
        }
    },
    "Ternary operator":{
        "function":{
            "Ecaluation result of conditional is true":"operator return evaluation result of left formula",
            "Ecaluation result of conditional is false":"operator return evaluation result of right formula"
        },
        "notation":"variable = conditional formula operand ? left formula operand : right formula operand",
        "use":{
            "change Initial value of variable by condition":{
                "alter notation":{
                    "if statement":{
                        "notation":"let variable; if(conditional formula) {variable = left formula}, else {variable = right formula}"
                    }
                }
            }
        }
    },
    "Get element":{
        "find method":{
            "function":"method assign each element to callback function one by one , if callback function return true, method return element, else return -1",
            "notation":"array.find(call backfunction)",
            "example":"variable = array.find((obj) => {return express}) console.log(variable)"
        }
    },
    "Filter method":{
        "function":{
            "argument":{
                "assign dummy arument of map method":"callback function",
                "return value":"new array",
                "callback function return value":{
                    "return true":"add curentValue to array",
                    "return false":"do not add to array"
                }
            },
            "Process":{
                "assign dummy argument of callback function":{
                    "1st dummy argument":"assign each element to dummy argument of callback functionone, one by one",
                    "2nd dummy argument":"assign index",
                    "3rd dummy argument":"assign array"
                }
            }
        },
        "notation":"array.filter((currentValue, index, array) => {statement;})"	
    },
    "strict inequal conparison operator":{
        "function":{
            "Number data type":"operator compaires two operands and if operands are different data type or different value, return true",
            "String data type":"operator compaires two operands and if operands are different data type or different value, return true",
            "Object data type":"operator compaires two operands and if operands not referent same data on memory, return true",
            "Array data type":"operator compaires two operands and if operands not referent same data on memory, return true",
            "Operands is Null data type":"return false",
            "Operands is Undefined":"return false",
            "Null and Undefined":"operator return true",
            "defference data type":"operator return true"
        },
        "notation":"operand !== operand"
    },
    "NOT operator":{
        "function":{
            "Boolean data type":{
                "operand is true":"operator return false",
                "operand is false":"operator return true"
            },
            "Number data type":{
                "operand is 0":"operator return true",
                "operand is not 0":"operator return false"
            },
            "String data type":{
                "operand is empty":"operator return true",
                "operand is not empty":"operator return false"
            }
        },
        "use":{
            "convert to boolean data type":{
                "how to use":"!! operand",
                "alter notation":{
                    "example":"const str = jj , !!str ⇒　str.length > 0"
                }
            }
        },
        "notation":"!operand"
    }
}